package View;

import Controller.ConectandoBanco;
import Model.Temperatura;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;
import javax.swing.text.MaskFormatter;
import javax.xml.crypto.Data;

/**
 *
 * @author João Felipe
 */
public class VTemperatura extends javax.swing.JFrame {

    /**
     * Creates new form Temperatura
     */
    public VTemperatura() {
        initComponents();

        ConectandoBanco conect = new ConectandoBanco();
        // Puxa dados do banco para o ComboBOx
        conect.configuraComboBox(jComboBoxArea);

        URL url = this.getClass().getResource("/Imagens/icone.ico");
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(imagemTitulo);
    }

    public Date getDataAtual() {
        Calendar calendar = new GregorianCalendar();
        Date date = new Date();
        calendar.setTime(date);
        return calendar.getTime();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextMin = new javax.swing.JTextField();
        jTextMax = new javax.swing.JTextField();
        jText21H = new javax.swing.JTextField();
        jButtonCalcular = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxArea = new javax.swing.JComboBox();
        ccb = new View.VJCalendar(false);
        jButtonSelecionar = new javax.swing.JButton();
        jText21HoraAnt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Inserir Temperatura");
        setResizable(false);

        jLabel1.setText("Temperaturas:");

        jLabel2.setText("21h Anterior");
        jLabel2.setToolTipText("Temperatura das 21:00 do dia anterior.");

        jLabel3.setText("Mínima");

        jLabel4.setText("Máxima");

        jLabel5.setText("21 Horas");

        jTextMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextMinActionPerformed(evt);
            }
        });

        jTextMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextMaxActionPerformed(evt);
            }
        });

        jButtonCalcular.setText("Armazenar");
        jButtonCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalcularActionPerformed(evt);
            }
        });

        jLabel6.setText("Área:");

        jComboBoxArea.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Área" }));
        jComboBoxArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBoxAreaMouseClicked(evt);
            }
        });
        jComboBoxArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxAreaItemStateChanged(evt);
            }
        });
        jComboBoxArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxAreaActionPerformed(evt);
            }
        });
        jComboBoxArea.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jComboBoxAreaInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        ccb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ccbItemStateChanged(evt);
            }
        });
        ccb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ccbActionPerformed(evt);
            }
        });

        jButtonSelecionar.setText("Selecionar");
        jButtonSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelecionarActionPerformed(evt);
            }
        });

        jText21HoraAnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jText21HoraAntActionPerformed(evt);
            }
        });

        jLabel7.setText("Data:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButtonCalcular, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jText21HoraAnt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jTextMin, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jTextMax, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jText21H, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxArea, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ccb, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSelecionar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jComboBoxArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ccb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSelecionar)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jText21H, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(jText21HoraAnt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButtonCalcular)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextMaxActionPerformed

    }//GEN-LAST:event_jTextMaxActionPerformed

    private void ccbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ccbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ccbActionPerformed

    private void jButtonCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalcularActionPerformed
        if (jComboBoxArea.isEnabled()) {
            JOptionPane.showMessageDialog(null, "Selecione uma Data e uma Temperatura!", "Erro!", JOptionPane.ERROR_MESSAGE);
        } else {

            /**
             * *************************************************************************************
             *
             * PRECISA CRIAR VERIFICAÇÃO PARA VER SE NÃO ESTÁ INSERINDO EM UM
             * DIA QUE JA EXISTE. CONCLUIDO. PRECISA CRIAR UM IF PARA QUANDO
             * INSERIR UM DIA QUE NÃO POSSUI O ANTERIOR MAS POSSUI O DIA
             * SEGUINTE EX: X/X/_/Y/X INSERINDO Y.
             * *************************************************************************************
             */
//            //System.out.println(ccb.getSelectedItem().toString());
//            if(ccb.getSelectedItem().toString() == null){
//                JOptionPane.showMessageDialog(null,"Selecione uma data.","Erro!", JOptionPane.ERROR_MESSAGE);
//            }
            // Coletando dados para ver se já foi inserido temperaturas no dia selecionado.
            ConectandoBanco conect = new ConectandoBanco();
            Temperatura temp = new Temperatura();
            String codTemperatura = temp.converteData(((VJCalendar) ccb).getText());
            String area = jComboBoxArea.getSelectedItem().toString();
            boolean nPossui = false;
            // Coletando o dia selecionado
            GregorianCalendar gc = new GregorianCalendar();
            gc = (GregorianCalendar) ccb.getSelectedItem();
            try {
                conect.conecta();
                ResultSet RS = conect.execRetorna("SELECT codArea FROM Area where nomeArea='" + area + "'");
                String codArea = RS.getString("codArea");
                conect.desconecta();

                conect.conecta();
                ResultSet verifica = conect.execRetorna("SELECT codTemperatura FROM Temperatura WHERE codArea='" + codArea + "' and codTemperatura='" + codTemperatura + "'");
                if (!verifica.next()) {
                    // se não possuir o dia então insere de boa
                    nPossui = true;
                }

                conect.desconecta();
//            ResultSet ver = conect.execRetorna("SELECT codArea FROM Temperatura WHERE codTemperatura='" + codTemperatura + "' and codArea='" + area + "'");
                if (nPossui == false) {
                    //Então já existe está data com as temperaturas.
                    // MUDAR PARA JDIALOG E OFERECER OPÇÃO DE MUDAR A TEMPERATURA DA DATA
                    int n = JOptionPane.showConfirmDialog(null, "Já foi inseridas as temperaturas desta data!\nDeseja substituir?", "Data Temperatura!", JOptionPane.YES_NO_CANCEL_OPTION);
                    System.out.println("N=" + n);
                    if (n == 0) {
                        if (jText21H.getText().equals("") || jTextMax.getText().equals("") || jTextMin.getText().equals("")) {
                            JOptionPane.showMessageDialog(null, "Preencha todos os campos", "Erro!", JOptionPane.ERROR_MESSAGE);
                        } else if (jText21HoraAnt.isEnabled() && jText21HoraAnt.getText().equals("")) {
                            JOptionPane.showMessageDialog(null, "Preencha todos os campos", "Erro!", JOptionPane.ERROR_MESSAGE);
                        } else {
                            System.out.println("Substituindo............................");
                            ArrayList<ArrayList> temps = calculandoTemps(codArea, gc, conect, codTemperatura);
                            conect.atualizarDadosBanco(temps, codArea, codTemperatura, gc);
                            JOptionPane.showMessageDialog(null, "Temperatura atualizada com sucesso.", "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
                            jText21H.setText("");
                            jText21HoraAnt.setText("");
                            jTextMax.setText("");
                            jTextMin.setText("");

                            if (!jComboBoxArea.isEnabled()) {
                                jComboBoxArea.setEnabled(true);
                                ccb.setEnabled(true);
                                jButtonSelecionar.setText("Selecionar");
                                jText21HoraAnt.enable(true);
                                jText21HoraAnt.setBackground(Color.WHITE);
                            }
                        }
                    }

                } else {
                    if (jText21H.getText().equals("") || jTextMax.getText().equals("") || jTextMin.getText().equals("")) {
                        JOptionPane.showMessageDialog(null, "Preencha todos os campos", "Erro!", JOptionPane.ERROR_MESSAGE);
                    } else if (jText21HoraAnt.isEnabled() && jText21HoraAnt.getText().equals("")) {
                        JOptionPane.showMessageDialog(null, "Preencha todos os campos", "Erro!", JOptionPane.ERROR_MESSAGE);
                    } else {
                        ArrayList<ArrayList> temps = calculandoTemps(codArea, gc, conect, codTemperatura);
                        conect.insereDadosBanco(temps, codArea, codTemperatura, gc);
                        jText21H.setText("");
                        jText21HoraAnt.setText("");
                        jTextMax.setText("");
                        jTextMin.setText("");

                        if (!jComboBoxArea.isEnabled()) {
                            jComboBoxArea.setEnabled(true);
                            ccb.setEnabled(true);
                            jButtonSelecionar.setText("Selecionar");
                            jText21HoraAnt.enable(true);
                            jText21HoraAnt.setBackground(Color.WHITE);

                        }
                    }

                }
                //******************************************************** Fim coleta de dados.
            } catch (Exception ex) {
                System.out.println("CAIU NO CATCH AHHAHA");
                Logger.getLogger(VTemperatura.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonCalcularActionPerformed

    private ArrayList<ArrayList> calculandoTemps(String codArea, GregorianCalendar gc, ConectandoBanco conect, String codTemperatura) {
        try {
//          Temperatura temp = new Temperatura();
//          String codTemperatura = temp.converteData(((VJCalendar) ccb).getText());
//          String area = jComboBoxArea.getSelectedItem().toString();

            //System.out.println("codArea: "+ codArea +" codTemperatura: "+ codTemperatura); // Teste
            float T21a = 0;
            //------------ variaveis para converter , em .
            String aux = null;
            String aux1 = null;
            String aux2 = null;
            String aux3 = null;
            java.text.NumberFormat nf = java.text.NumberFormat.getNumberInstance();
            nf.setMinimumFractionDigits(2);
            nf.setMaximumFractionDigits(2);
            if (jText21HoraAnt.isEnabled()) {
                aux = jText21HoraAnt.getText();
                aux = aux.replaceAll(",", ".");
                T21a = Float.parseFloat(aux);
            } else {
                T21a = 99987;
            }
            aux1 = jTextMin.getText();
            aux2 = jTextMax.getText();
            aux3 = jText21H.getText();
            aux1 = aux1.replaceAll(",", ".");
            aux2 = aux2.replaceAll(",", ".");
            aux3 = aux3.replaceAll(",", ".");
            float Tm = Float.parseFloat(aux1);
            float Tx = Float.parseFloat(aux2);
            float T21d = Float.parseFloat(aux3);

            Temperatura Tempe = new Temperatura();
            ArrayList<ArrayList> temps = Tempe.interpolaTempTres(T21a, Tm, Tx, T21d, codArea, gc);
//                        conect.insereUtah(temps, codArea, gc2);
            return temps;

        } catch (Exception ex) {
            Logger.getLogger(VTemperatura.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null; //nunca deve ocorrer.
    }

    private void jComboBoxAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxAreaMouseClicked

    }//GEN-LAST:event_jComboBoxAreaMouseClicked

    private void jComboBoxAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxAreaItemStateChanged

    }//GEN-LAST:event_jComboBoxAreaItemStateChanged

    private void jComboBoxAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxAreaActionPerformed

    }//GEN-LAST:event_jComboBoxAreaActionPerformed

    private void jComboBoxAreaInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jComboBoxAreaInputMethodTextChanged
        // TODO add your handling code here:
//        if(jComboBoxArea.getSelectedItem().toString().equals("bunda")){
//            jText21HoraAnt.disable();
//        }
    }//GEN-LAST:event_jComboBoxAreaInputMethodTextChanged


    private void jButtonSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelecionarActionPerformed
        // BLOQUEANDO SELETOR DE AREA E DIA
        if (jComboBoxArea.isEnabled()) {
            jComboBoxArea.setEnabled(false);
            ccb.setEnabled(false);
            jButtonSelecionar.setText("Desselecionar");
            jText21HoraAnt.enable(true);

        } else {
            jComboBoxArea.setEnabled(true);
            ccb.setEnabled(true);
            jButtonSelecionar.setText("Selecionar");
            jText21HoraAnt.enable(true);
            jText21HoraAnt.setBackground(Color.WHITE);

        }
        // Thu Jul 23 15:20:12 BRT 2015
        // 2015-07-23
        if (jButtonSelecionar.getText().equals("Desselecionar")) {
            try {
                ConectandoBanco conect = new ConectandoBanco();

                ResultSet RS = null;

            // BLOQUEANDO CAMPOS**************************************************************************************
                // PEGANDO DIA ANTERIOR
                GregorianCalendar gc = new GregorianCalendar();
                gc = (GregorianCalendar) ccb.getSelectedItem();
                gc.add(Calendar.DAY_OF_MONTH, -1);
                String dataAnt = conect.dataAntString(gc);

                // Pegando codArea ---------------------------------------------------------------------------
                conect.conecta();
                String area = jComboBoxArea.getSelectedItem().toString();
                ResultSet RS2 = conect.execRetorna("SELECT codArea FROM Area where nomeArea='" + area + "'");
                String codArea = RS2.getString("codArea");
                conect.desconecta();
                // ------------------------------------------------ Final pegando codArea

                conect.conecta();

                // ATUALIZANDO CAMPOS DE TEXTO (BLOQUEANDO OU NAO).
                ResultSet rs = conect.execRetorna("SELECT hora21 FROM Temperatura WHERE codTemperatura='" + dataAnt + "' and codArea='" + codArea + "'");
                if (!rs.next()) {
                    // Se nao existir a hora21 do dia anterior então
                    System.out.println("IF do bloqueio");
                    jText21HoraAnt.enable(true);
                    jText21HoraAnt.setBackground(Color.WHITE);
                } else {
                    System.out.println("Else do bloqueio");
                    jText21HoraAnt.disable();
                    jText21HoraAnt.setBackground(Color.LIGHT_GRAY);
                    jText21HoraAnt.setText("");
                    jText21H.setText("");
                    jTextMax.setText("");
                    jTextMin.setText("");
                }
                conect.desconecta();
            } catch (SQLException ex) {
                Logger.getLogger(VModificarArea.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(VTemperatura.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonSelecionarActionPerformed

    private void jTextMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextMinActionPerformed

    }//GEN-LAST:event_jTextMinActionPerformed

    private void jText21HoraAntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jText21HoraAntActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jText21HoraAntActionPerformed

    private void ccbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ccbItemStateChanged

    }//GEN-LAST:event_ccbItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VTemperatura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VTemperatura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VTemperatura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VTemperatura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VTemperatura().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ccb;
    private javax.swing.JButton jButtonCalcular;
    private javax.swing.JButton jButtonSelecionar;
    private javax.swing.JComboBox jComboBoxArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jText21H;
    private javax.swing.JTextField jText21HoraAnt;
    private javax.swing.JTextField jTextMax;
    private javax.swing.JTextField jTextMin;
    // End of variables declaration//GEN-END:variables
}
