/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.ConectandoBanco;
import Model.ImportaArea;
import Model.ImportaTabela;
import Model.TabelaConsulta;
import Model.Temperatura;
import View.VImportando;
import View.VImportar;
import java.awt.BorderLayout;
import static java.lang.Thread.sleep;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JProgressBar;

/**
 *
 * @author Juliano
 */
public class VImportarArea extends javax.swing.JFrame {

    ConectandoBanco conect = new ConectandoBanco();

    /**
     * Creates new form VImportarArea
     */
    public VImportarArea() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void importaArea(String campo, ArrayList<ArrayList> dados, boolean sobrescrever) throws Exception {
        ImportaTabela imp = new ImportaTabela();
        ArrayList<ImportaArea> dadosTabela = new ArrayList<ImportaArea>();

        int cont = 0;
        String x=null;
        for (ArrayList importa1 : dados) {    //TESTE 
            ImportaArea impArea = new ImportaArea();
            for (Object dia1 : importa1) {
                System.out.println(dia1);
                x=null;
                if (cont == 0) {
                    System.out.println("Cont = 0. Dia: " + dia1.toString() + "");
                    x=dia1.toString();
                    x = x.replaceAll(",", ".");
                    impArea.setData(x);
                }
                if (cont == 1) {
                    System.out.println("Cont = 1. Hora 21 ant: " + dia1.toString() + "");
                    x=dia1.toString();
                    x = x.replaceAll(",", ".");
                    impArea.setHora21ant(x);
                }
                if (cont == 2) {
                    System.out.println("Cont = 2. Min: " + dia1.toString() + "");
                    x=dia1.toString();
                    x = x.replaceAll(",", ".");
                    impArea.setMin(x);
                }
                if (cont == 3) {
                    System.out.println("Cont = 3. Max: " + dia1.toString() + "");
                    x=dia1.toString();
                    x = x.replaceAll(",", ".");
                    impArea.setMax(x);
                }
                if (cont == 4) {
                    System.out.println("Cont = 4. 21h: " + dia1.toString() + "");
                    x=dia1.toString();
                    x = x.replaceAll(",", ".");
                    impArea.setHora21(x);
                }
                cont++;
            }
            cont = 0;
            dadosTabela.add(impArea);
        }
        insereDados(campo, dadosTabela, sobrescrever);
    }

    /**
     * Insere os dados importados no banco.
     *
     * @param dadosTabela
     * @param areas
     */
    private void insereDados(String area, ArrayList<ImportaArea> dadosTabela, boolean sobrescrever) throws Exception {
        // precisa inserir no banco usando os metodos de inserir e atualizar, 
        // precisa fazer os calculos de interpolação e unidades
        Temperatura temp = new Temperatura();
        final int tamanho = dadosTabela.size();
        System.out.println("testeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee tamanhoa: "+tamanho);
        int i;

        //Pegando código da área.
        conect.conecta();
        ResultSet RS = conect.execRetorna("SELECT codArea FROM Area WHERE nomeArea='" + area + "'");
        String codArea = RS.getString("codArea");
        conect.desconecta();



//        tamanhoBar(tamanho);
//        bomba();
        for (i = 0; i < tamanho; i++) {
                

                ArrayList<ArrayList> temperaturas = new ArrayList<ArrayList>();
                temperaturas.clear();
                temperaturas = temp.interpolaTempTres(Float.parseFloat(dadosTabela.get(i).getHora21ant()), Float.parseFloat(dadosTabela.get(i).getMin()), Float.parseFloat(dadosTabela.get(i).getMax()), Float.parseFloat(dadosTabela.get(i).getHora21()), area, null);
                ArrayList<String> dat = this.dataAnt(dadosTabela.get(i).getData());
                GregorianCalendar gc = new GregorianCalendar(Integer.parseInt(dat.get(0)), Integer.parseInt(dat.get(1)) - 1, Integer.parseInt(dat.get(2)));// 2012-04-21  

                conect.conecta();
                ResultSet confere = conect.execRetorna("SELECT codTemperatura FROM Temperatura WHERE codTemperatura='" + dadosTabela.get(i).getData() + "' and codArea='" + codArea + "'");
                boolean possui = confere.next();
                conect.desconecta();

                if (possui && sobrescrever) {
                    System.out.println("caiu no possui");
                    conect.atualizarDadosBanco(temperaturas, codArea, dadosTabela.get(i).getData(), gc);
                } else if (sobrescrever == false && possui == false) {
                    System.out.println("Insere normal1.");
                    conect.inserindoDados(temperaturas, dadosTabela.get(i).getData(), codArea, gc, 0);
                } else if (sobrescrever == true && possui == false) {
                    System.out.println("Insere normal2");
                    // Método para inserir no banco.
                    conect.inserindoDados(temperaturas, dadosTabela.get(i).getData(), codArea, gc, 0);
                } else {
                    System.out.println("caiu no else sem nd!");
                }
            }
        }

    /**
     * Recebe uma data no formato YYYY-MM-DD e retorna a data quebrada.
     *
     * @param data
     * @return
     */
    public ArrayList<String> dataAnt(String data) {
        String ano = data.substring(0, 4);
        String mes = data.substring(5, 7);
        String dia = data.substring(8, 10);

        ArrayList<String> dataQuebrada = new ArrayList<String>();
        dataQuebrada.add(ano);
        dataQuebrada.add(mes);
        dataQuebrada.add(dia);
        return dataQuebrada;
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Importando dados... Isso pode levar alguns minutos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VImportarArea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VImportarArea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VImportarArea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VImportarArea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VImportarArea().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
